%% 
%%
%% Copyright 2012-2018 The MathWorks, Inc.
%%
%% Abstract: Performs XCP Configuration for CAN transport layer.

%implements sxcpcanconfig "C"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void
    %<LibAddToCommonIncludes("sharedxcp/xcpmpl/xcpmaster.h")>
    
%endfunction %% BlockTypeSetup

%% Function: BlockInstanceSetup ==============================================
%%
%function BlockInstanceSetup(block, system) void

  %assign slaveTag = SFcnParamSettings.SlaveTag
  %assign tlTag = SFcnParamSettings.TLTag
  %assign skDLL = STRING(SFcnParamSettings.SKDLL)
  %assign block = block + slaveTag + tlTag + skDLL

%endfunction %% BlockInstanceSetup


%% Function: Start ==========================================================
%%
%function Start(block, system) Output
{
    %if EXISTS("slrt") && slrt
    if (!xpcIsModelInit())
    %endif
    {
        /* XCP CAN Configuration Block (%<ParamSettings.FunctionName>) - '%<Name>' - Start */
        int32_T error; 

        %<LibBlockPWork(XCPHandle, "", "", 0)> = xcpmGetHandle("%<slaveTag>");

        %assign pInfo = LibBlockParameterAddr(ProtocolInfo, "", "", 0)
        %assign dInfo = LibBlockParameterAddr(DAQInfo, "", "", 0)
        %assign eInfo = LibBlockParameterAddr(EventsInfo, "", "", 0)
        %assign mInfo = LibBlockParameterAddr(MeasurementsInfo, "", "", 0)
        %assign tInfo = LibBlockParameterAddr(TransportInfo, "", "", 0)
        error =  xcpmRegisterSlave(%<LibBlockPWork(XCPHandle, "", "", 0)>,  
                                    "%<tlTag>", 
                                    L"%<skDLL>",
                                    (real_T*)%<pInfo>,
                                    (real_T*)%<dInfo>,
                                    (real_T*)%<eInfo>, 
                                    (real_T*)%<mInfo>,
                                    TL_CAN, 
                                    (real_T*)%<tInfo>);
        if (error!=XCP_ERROR_OK){
            char errMsg[255] = "Unable to register the slave successfully.";
            %<RTMSetErrStat("errMsg")>;
            %<RTMSetStopRequested(1)>;
            return;          
        }
	}
}
%endfunction %% Start


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
{
    /* XCP CAN Configuration Block (%<ParamSettings.FunctionName>) - '%<Name>' - Output */
    void* xcpHandle = %<LibBlockPWork(XCPHandle, "", "", 0)>;
    XcpStatus status;
    status = xcpmGetConnStatus(xcpHandle);
    
    if (status == XCP_CONN_START){
        xcpmConnect(xcpHandle);
    }
                               
    %if (SFcnParamSettings.EnableStatusPort==1)
        %% Status port exists.
        %assign pStatus = LibBlockOutputSignal(0,"","",0)
        if (status == XCP_CONN_DAQ_STARTED){
            %<pStatus> = 1;
        }else{
            %<pStatus> = 0;
        }
    %endif
}
%endfunction %% Outputs


%% Function: Update ==========================================================
%%
%function Update(block, system) Output

%endfunction %% Update


%% Function: Terminate ==========================================================
%%
%function Terminate(block, system) Output
{
    %if EXISTS("slrt") && slrt
    if (!xpcIsModelInit())
    %endif
    {  
        /* XCP Configuration Block (%<ParamSettings.FunctionName>) - '%<Name>' - Terminate */
	    /* Release the XCP handle. */
		if (%<LibBlockPWork(XCPHandle, "", "", 0)> != NULL){
            xcpmReleaseHandle( %<LibBlockPWork(XCPHandle, "", "", 0)> );
		}
	}    
}
%endfunction %% Terminate

%% [EOF] sxcpconfig.tlc
