%This functions runs over the provided MemoryMap file and replace it's
%content with a template designed to make Memory map files more robust to
%catch any error if Macros or pragmas are not properly defined.
function UpdateMemoryMapFiles(modelName,MemoryMapFile)
%Extract generated comments from MemMap File
MemMapContent = fileread(MemoryMapFile);
MemMapComment = extractBefore(MemMapContent,'#define MEMMAP_ERROR');
arProps = autosar.api.getAUTOSARProperties(modelName);

if ~isempty(arProps)
    SWCName = find(arProps,[],'Component');
    codeSwAddrMthd = find(arProps,[],'SwAddrMethod','SectionType','Code');
    codeSwAddrMthd = string(codeSwAddrMthd);
    if ~isempty(SWCName)
        if iscell(SWCName)
            SWCName = SWCName{1};
        else
            %do nothing
        end
        
        if ~isempty(codeSwAddrMthd)
            if contains(codeSwAddrMthd,'ASIL')
                coreNumber = char(extractBetween(codeSwAddrMthd,'CODE_','ASIL'));
                asilLevel = char(extractAfter(codeSwAddrMthd,strcat('CODE_',coreNumber,'ASIL')));
                CoreAndAsilLabel = [coreNumber,'ASIL',asilLevel];
           elseif contains(codeSwAddrMthd,'QM')
               coreNumber = char(extractBetween(codeSwAddrMthd,'CODE_','QM'));
               asilLevel = char(extractAfter(codeSwAddrMthd,strcat('CODE_',coreNumber)));
               CoreAndAsilLabel = [coreNumber,asilLevel];
            else
                error(['Unreconized SwAddrMethod:' codeSwAddrMthd]);
            end
            
            
            %Extract generated comments from MemMap File
            MemMapContent = fileread(MemoryMapFile);
            MemMapComment = extractBefore(MemMapContent,'#define MEMMAP_ERROR');
            
            START_MEM_MACROS = {[SWCName,'_START_SEC_CODE_',CoreAndAsilLabel],...
                [SWCName,'_START_SEC_CALIB_',CoreAndAsilLabel],...
                [SWCName,'_START_SEC_VAR_',CoreAndAsilLabel],...
                [SWCName,'_START_SEC_CONST_',CoreAndAsilLabel],...
                };
            STOP_MEM_MACROS = replace(START_MEM_MACROS,'_START_','_STOP_');
            
            MACROS_HEADERS = {['/****************************************************************************/\n',...
                                '/*********************************** CODE ***********************************/\n',...
                                '/****************************************************************************/\n'],...
                              ['/****************************************************************************/\n',...
                                '/********************************** CALIBRATIONS ****************************/\n',...
                                '/****************************************************************************/\n'],...
                              ['/****************************************************************************/\n',...
                                '/*********************************** VARIABLES ******************************/\n',...
                                '/****************************************************************************/\n'],...
                              ['/****************************************************************************/\n',...
                                '/*********************************** CONSTANTS ******************************/\n',...
                                '/****************************************************************************/\n']
                             };
            
            VAR_START_PRAGMAS = ['// Variables\n\t',...
              		'#pragma ghs section data=','".APP_VAR_INIT0_EATON_',CoreAndAsilLabel,'"\n\t',...
              		'#pragma ghs section sdata=','".APP_VAR_INIT1_EATON_',CoreAndAsilLabel,'"\n\n\t',...
                '// Variables (Initialized to zero)\n\t',...
              		'#pragma ghs section sbss=','".APP_VAR_NO_INIT_EATON_',CoreAndAsilLabel,'"\n\n\t'];
            CALIB_START_PRAGMAS = ['// Variable Constants\n\t',...
              		'#pragma ghs section rosdata=','".APP_CALIB_PARA_EATON_',CoreAndAsilLabel,'"\n\n\t'];
            CONST_START_PRAGMAS = ['// Variable Constants\n\t',...
              		'#pragma ghs section rosdata=','".APP_CONST_PARA_EATON_',CoreAndAsilLabel,'"\n\n\t'];
            CODE_START_PRAGMAS = ['// Code\n\t',...
              		'#pragma ghs section text=','".APP_CODE_EATON_',CoreAndAsilLabel,'"\n\n\t'];
            STOP_PRAGMAS = ['// Variables\n\t',...
              		'#pragma ghs section data=default\n\t',...
              		'#pragma ghs section sdata=default\n\n\t',...
              		'// Variables (Initialized to zero)\n\t',...
              		'#pragma ghs section sbss=default\n\n\t',...
              		'// Variable Constants\n\t',...
              		'#pragma ghs section rosdata=default\n\n\t',...
              		'// Code\n\t',...
              		'#pragma ghs section text=default\n\n'];
            updatedMemMap = MemMapComment;
            for ii = 1: length(START_MEM_MACROS)
                SectionTemplate = ['#ifdef ',char(STOP_MEM_MACROS{ii}),'\n\t',...
                    '#ifdef ',START_MEM_MACROS{ii},'_STOP_CHECK\n\t\t',...
                    '#undef ',START_MEM_MACROS{ii},'_STOP_CHECK\n\t',...
                    '#else\n\t\t',...
                    '#error "',SWCName,'_MemMap.h Error: ',STOP_MEM_MACROS{ii},'macro used without associated macro ',START_MEM_MACROS{ii},' used first."\n\t',...
                    '#endif\n\n\t',...
                    '#undef ',STOP_MEM_MACROS{ii},'\n\n\t',...
                    '// Check for multiple macro usage\n\t',...
                    '#ifdef ',SWCName,'_MEMMAP_FOUND_ONE_MACRO\n\t\t',...
                    '#error "',SWCName,'_MemMap.h Error: ','Multiple macros used including ',STOP_MEM_MACROS{ii},'."\n\t',...
                    '#else\n\t\t',...
                    '#define ',SWCName,'_MEMMAP_FOUND_ONE_MACRO\n\t',...
                    '#endif\n\n\t',...
                    '/***** SET PRAGMAS TO DEFAULT****/\n\t',...
                    STOP_PRAGMAS,...
                    '#elif defined(',START_MEM_MACROS{ii},'_STOP_CHECK)\n\t',...
                    '#error "',SWCName,'_MemMap.h Error: ',START_MEM_MACROS{ii},' macro was used, but',STOP_MEM_MACROS{ii},' wasn''t used immediately after."\n',...
                    '#endif\n\n',...
                    '#ifdef ',START_MEM_MACROS{ii},'\n\t',...
                    '#undef ',START_MEM_MACROS{ii},'\n\n\t',...
                    '// Check for multiple macro usage\n\t',...
                    '#ifdef ',SWCName,'_MEMMAP_FOUND_ONE_MACRO\n\t\t',...
                    '#error "',SWCName,'_MemMap.h Error: ','Multiple macros used including ',START_MEM_MACROS{ii},'."\n\t',...
                    '#else\n\t\t',...
                    '#define ',SWCName,'_MEMMAP_FOUND_ONE_MACRO\n\t',...
                    '#endif\n\n\t',...
                    '/***** CONFIGURE PRAGMAS *****/\n\t',...
                    VAR_START_PRAGMAS];
                if strcmp(START_MEM_MACROS{ii},strcat(SWCName,'_START_SEC_CALIB_',CoreAndAsilLabel))
                    SectionTemplate = [SectionTemplate,CALIB_START_PRAGMAS];
                else
                    SectionTemplate = [SectionTemplate,CONST_START_PRAGMAS];
                end
                SectionTemplate = [SectionTemplate,CODE_START_PRAGMAS,...
                    '// Make sure corresponding stop is used next\n\t',...
                    '#define ',char(START_MEM_MACROS{ii}),'_STOP_CHECK\n',...
                    '#endif\n\n'];
                updatedMemMap = [updatedMemMap,MACROS_HEADERS{ii},SectionTemplate];
            end
            MEMMAP_ERROR = ['/****************************************************************************/\n',...
                            '/********************************** ERROR CHECK *****************************/\n',...
                            '/****************************************************************************/\n\n',...
                '#ifdef ',SWCName,'_MEMMAP_FOUND_ONE_MACRO\n\t',...
                '#undef ',SWCName,'_MEMMAP_FOUND_ONE_MACRO\n',...
                '#else\n\t',...
                '#error "',SWCName,'_MemMap.h',' : Macro not found in MemMap."\n',...
                '#endif\n\n'];
            updatedMemMap = [updatedMemMap,MEMMAP_ERROR];
            
            fid=fopen(MemoryMapFile,'w+');
            fprintf(fid,updatedMemMap);
            fclose(fid);
        else
            error(modelName,': SwAddrMethod for CODE not found in arxml');
        end
    else
        error(modelName,': SWC Name not found in arxml');
    end
else
    error(modelName,': autosar properties could not be found for this model, make sure this is a autosar compliant model');
end